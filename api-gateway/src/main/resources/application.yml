server:
  port: 8083

logging:
  level:
    root: INFO
    org.springframework.cloud.gateway: INFO
    org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: INFO
    reactor.netty: INFO
    org.springframework.security: TRACE

spring:
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: ${KEYCLOAK_CLIENTID}
            client-secret: ${KEYCLOAK_CLIENTSECRET}
            scope: openid, profile, email, username
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8085/realms/my-task-manager-realm
          jwk-set-uri: //localhost:8085/realms/my-task-manager-realm/protocol/openid-connect/certs


  main:
    web-application-type: reactive
    allow-bean-definition-overriding: true
  cloud:
    gateway:
      routes:
        - id: user-service
          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
          predicates:
            - Path=/api/users/**

        - id: user-task-service
          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
          predicates:
            - Path=/api/user-task/**

        - id: authentication
          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
          predicates:
            - Path=/api/auth/**

#        - id: user-service-register
#          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
#          predicates:
#            - Path=/api/auth/register
#            - Method=POST
#        - id: user-service-login
#          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
#          predicates:
#            - Path=/api/auth/login
#            - Method=POST
#          filters:
#            - AuthenticationFilter
#        - id: user-service-validate-token
#          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
#          predicates:
#            - Path=/api/auth/validate-token
#            - Method=POST
#        - id: user-service-get
#          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
#          predicates:
#            - Path=/api/auth/get/all
#            - Method=GET
#        - id: user-service-create
#          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
#          predicates:
#            - Path=/api/task/add/**
#            - Method=POST
#        - id: task-service-create
#          uri: http://${USER_SERVICE_BASEURL:localhost:8081}
#          predicates:
#            - Path=/api/user-task/addForCurrentUser
#            - Method=POST
#          filters:
#            - SetPath=/api/task/add/{userCode}
#        - id: task-service-all
#          uri: http://${TASK_SERVICE_BASEURL:localhost:8080}
#          predicates:
#            - Path=/api/task/get/all
#            - Method=GET
#        - id: task-service-update
#          uri: http://${TASK_SERVICE_BASEURL:localhost:8080}
#          predicates:
#            - Path=/api/task/update/**
#            - Method=PUT
#          filters:
#            - SetPath=/api/task/update/{taskCode}/{userCode}
#        - id: task-service-delete
#          uri: http://${TASK_SERVICE_BASEURL:localhost:8080}
#          predicates:
#            - Path=/api/task/delete/**
#            - Method=DELETE
#          filters:
#            - SetPath=/api/task/delete/{taskId}
#        - id: task-service-get
#          uri: http://${TASK_SERVICE_BASEURL:localhost:8080}
#          predicates:
#            - Path=/api/task/get/**
#            - Method=GET
#          filters:
#            - SetPath=/api/task/get/{taskId}